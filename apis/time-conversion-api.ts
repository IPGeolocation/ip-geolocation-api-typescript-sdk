/* tslint:disable */
/* eslint-disable */
/**
 * IPGeolocation.io - IP intelligence products
 * Ipgeolocation provides a set of APIs to make ip based decisions.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ErrorResponse } from '../models';
// @ts-ignore
import type { ErrorXMLResponse } from '../models';
// @ts-ignore
import type { TimeConversionResponse } from '../models';
// @ts-ignore
import type { TimeConversionXMLResponse } from '../models';
/**
 * TimeConversionApi - axios parameter creator
 * @export
 */
export const TimeConversionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * You can convert a timestamp provided as a query paramter time from one time zone to another time zone.
         * @param {string} [time] time parameter takes the input in the following two formats: i) \&#39;yyyy-MM-dd HH:mm\&#39;, and ii) \&#39;yyyy-MM-dd HH:mm:ss\&#39;. This parameter is optional and you can omit it to convert the current time between two coordinates, time zones or locations.
         * @param {string} [tzFrom] timezone to convert from
         * @param {string} [tzTo] timezone to convert to
         * @param {number} [latFrom] latitude to convert from
         * @param {number} [longFrom] longitude to convert from
         * @param {number} [latTo] latitude to convert to
         * @param {number} [longTo] longitude to convert to
         * @param {string} [locationFrom] location to convert from
         * @param {string} [locationTo] location to convert to
         * @param {string} [icaoFrom] location to convert from
         * @param {string} [icaoTo] location to convert to
         * @param {string} [iataFrom] location to convert from
         * @param {string} [iataTo] location to convert to
         * @param {string} [locodeFrom] location to convert from
         * @param {string} [locodeTo] location to convert to
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        convertTimeBetweenTimezones: async (time?: string, tzFrom?: string, tzTo?: string, latFrom?: number, longFrom?: number, latTo?: number, longTo?: number, locationFrom?: string, locationTo?: string, icaoFrom?: string, icaoTo?: string, iataFrom?: string, iataTo?: string, locodeFrom?: string, locodeTo?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/timezone/convert`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarQueryParameter, "apiKey", configuration)

            if (time !== undefined) {
                localVarQueryParameter['time'] = time;
            }

            if (tzFrom !== undefined) {
                localVarQueryParameter['tz_from'] = tzFrom;
            }

            if (tzTo !== undefined) {
                localVarQueryParameter['tz_to'] = tzTo;
            }

            if (latFrom !== undefined) {
                localVarQueryParameter['lat_from'] = latFrom;
            }

            if (longFrom !== undefined) {
                localVarQueryParameter['long_from'] = longFrom;
            }

            if (latTo !== undefined) {
                localVarQueryParameter['lat_to'] = latTo;
            }

            if (longTo !== undefined) {
                localVarQueryParameter['long_to'] = longTo;
            }

            if (locationFrom !== undefined) {
                localVarQueryParameter['location_from'] = locationFrom;
            }

            if (locationTo !== undefined) {
                localVarQueryParameter['location_to'] = locationTo;
            }

            if (icaoFrom !== undefined) {
                localVarQueryParameter['icao_from'] = icaoFrom;
            }

            if (icaoTo !== undefined) {
                localVarQueryParameter['icao_to'] = icaoTo;
            }

            if (iataFrom !== undefined) {
                localVarQueryParameter['iata_from'] = iataFrom;
            }

            if (iataTo !== undefined) {
                localVarQueryParameter['iata_to'] = iataTo;
            }

            if (locodeFrom !== undefined) {
                localVarQueryParameter['locode_from'] = locodeFrom;
            }

            if (locodeTo !== undefined) {
                localVarQueryParameter['locode_to'] = locodeTo;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TimeConversionApi - functional programming interface
 * @export
 */
export const TimeConversionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TimeConversionApiAxiosParamCreator(configuration)
    return {
        /**
         * You can convert a timestamp provided as a query paramter time from one time zone to another time zone.
         * @param {string} [time] time parameter takes the input in the following two formats: i) \&#39;yyyy-MM-dd HH:mm\&#39;, and ii) \&#39;yyyy-MM-dd HH:mm:ss\&#39;. This parameter is optional and you can omit it to convert the current time between two coordinates, time zones or locations.
         * @param {string} [tzFrom] timezone to convert from
         * @param {string} [tzTo] timezone to convert to
         * @param {number} [latFrom] latitude to convert from
         * @param {number} [longFrom] longitude to convert from
         * @param {number} [latTo] latitude to convert to
         * @param {number} [longTo] longitude to convert to
         * @param {string} [locationFrom] location to convert from
         * @param {string} [locationTo] location to convert to
         * @param {string} [icaoFrom] location to convert from
         * @param {string} [icaoTo] location to convert to
         * @param {string} [iataFrom] location to convert from
         * @param {string} [iataTo] location to convert to
         * @param {string} [locodeFrom] location to convert from
         * @param {string} [locodeTo] location to convert to
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async convertTimeBetweenTimezones(time?: string, tzFrom?: string, tzTo?: string, latFrom?: number, longFrom?: number, latTo?: number, longTo?: number, locationFrom?: string, locationTo?: string, icaoFrom?: string, icaoTo?: string, iataFrom?: string, iataTo?: string, locodeFrom?: string, locodeTo?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TimeConversionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.convertTimeBetweenTimezones(time, tzFrom, tzTo, latFrom, longFrom, latTo, longTo, locationFrom, locationTo, icaoFrom, icaoTo, iataFrom, iataTo, locodeFrom, locodeTo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TimeConversionApi.convertTimeBetweenTimezones']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TimeConversionApi - factory interface
 * @export
 */
export const TimeConversionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TimeConversionApiFp(configuration)
    return {
        /**
         * You can convert a timestamp provided as a query paramter time from one time zone to another time zone.
         * @param {TimeConversionApiConvertTimeBetweenTimezonesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        convertTimeBetweenTimezones(requestParameters: TimeConversionApiConvertTimeBetweenTimezonesRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<TimeConversionResponse> {
            return localVarFp.convertTimeBetweenTimezones(requestParameters.time, requestParameters.tzFrom, requestParameters.tzTo, requestParameters.latFrom, requestParameters.longFrom, requestParameters.latTo, requestParameters.longTo, requestParameters.locationFrom, requestParameters.locationTo, requestParameters.icaoFrom, requestParameters.icaoTo, requestParameters.iataFrom, requestParameters.iataTo, requestParameters.locodeFrom, requestParameters.locodeTo, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for convertTimeBetweenTimezones operation in TimeConversionApi.
 * @export
 * @interface TimeConversionApiConvertTimeBetweenTimezonesRequest
 */
export interface TimeConversionApiConvertTimeBetweenTimezonesRequest {
    /**
     * time parameter takes the input in the following two formats: i) \&#39;yyyy-MM-dd HH:mm\&#39;, and ii) \&#39;yyyy-MM-dd HH:mm:ss\&#39;. This parameter is optional and you can omit it to convert the current time between two coordinates, time zones or locations.
     * @type {string}
     * @memberof TimeConversionApiConvertTimeBetweenTimezones
     */
    readonly time?: string

    /**
     * timezone to convert from
     * @type {string}
     * @memberof TimeConversionApiConvertTimeBetweenTimezones
     */
    readonly tzFrom?: string

    /**
     * timezone to convert to
     * @type {string}
     * @memberof TimeConversionApiConvertTimeBetweenTimezones
     */
    readonly tzTo?: string

    /**
     * latitude to convert from
     * @type {number}
     * @memberof TimeConversionApiConvertTimeBetweenTimezones
     */
    readonly latFrom?: number

    /**
     * longitude to convert from
     * @type {number}
     * @memberof TimeConversionApiConvertTimeBetweenTimezones
     */
    readonly longFrom?: number

    /**
     * latitude to convert to
     * @type {number}
     * @memberof TimeConversionApiConvertTimeBetweenTimezones
     */
    readonly latTo?: number

    /**
     * longitude to convert to
     * @type {number}
     * @memberof TimeConversionApiConvertTimeBetweenTimezones
     */
    readonly longTo?: number

    /**
     * location to convert from
     * @type {string}
     * @memberof TimeConversionApiConvertTimeBetweenTimezones
     */
    readonly locationFrom?: string

    /**
     * location to convert to
     * @type {string}
     * @memberof TimeConversionApiConvertTimeBetweenTimezones
     */
    readonly locationTo?: string

    /**
     * location to convert from
     * @type {string}
     * @memberof TimeConversionApiConvertTimeBetweenTimezones
     */
    readonly icaoFrom?: string

    /**
     * location to convert to
     * @type {string}
     * @memberof TimeConversionApiConvertTimeBetweenTimezones
     */
    readonly icaoTo?: string

    /**
     * location to convert from
     * @type {string}
     * @memberof TimeConversionApiConvertTimeBetweenTimezones
     */
    readonly iataFrom?: string

    /**
     * location to convert to
     * @type {string}
     * @memberof TimeConversionApiConvertTimeBetweenTimezones
     */
    readonly iataTo?: string

    /**
     * location to convert from
     * @type {string}
     * @memberof TimeConversionApiConvertTimeBetweenTimezones
     */
    readonly locodeFrom?: string

    /**
     * location to convert to
     * @type {string}
     * @memberof TimeConversionApiConvertTimeBetweenTimezones
     */
    readonly locodeTo?: string
}

/**
 * TimeConversionApi - object-oriented interface
 * @export
 * @class TimeConversionApi
 * @extends {BaseAPI}
 */
export class TimeConversionApi extends BaseAPI {
    /**
     * You can convert a timestamp provided as a query paramter time from one time zone to another time zone.
     * @param {TimeConversionApiConvertTimeBetweenTimezonesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeConversionApi
     */
    public convertTimeBetweenTimezones(requestParameters: TimeConversionApiConvertTimeBetweenTimezonesRequest = {}, options?: RawAxiosRequestConfig) {
        return TimeConversionApiFp(this.configuration).convertTimeBetweenTimezones(requestParameters.time, requestParameters.tzFrom, requestParameters.tzTo, requestParameters.latFrom, requestParameters.longFrom, requestParameters.latTo, requestParameters.longTo, requestParameters.locationFrom, requestParameters.locationTo, requestParameters.icaoFrom, requestParameters.icaoTo, requestParameters.iataFrom, requestParameters.iataTo, requestParameters.locodeFrom, requestParameters.locodeTo, options).then((request) => request(this.axios, this.basePath));
    }
}

