/* tslint:disable */
/* eslint-disable */
/**
 * IPGeolocation.io - IP intelligence products
 * Ipgeolocation provides a set of APIs to make ip based decisions.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ErrorResponse } from '../models';
// @ts-ignore
import type { ErrorXMLResponse } from '../models';
// @ts-ignore
import type { ParseBulkUserAgentStringsRequest } from '../models';
// @ts-ignore
import type { ParseUserAgentStringRequest } from '../models';
// @ts-ignore
import type { UserAgentData } from '../models';
// @ts-ignore
import type { UserAgentXMLData } from '../models';
// @ts-ignore
import type { UserAgentXMLDataArray } from '../models';
/**
 * UserAgentApi - axios parameter creator
 * @export
 */
export const UserAgentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * User Agent Parser API provides the accurate browser, device, and operating system details from a User Agent String. It also provides information about crawlers and attack sources. You can use these details to customize user experience, prevent crawlers and attackers from accessing your website. 
         * @summary Get details of user-agent
         * @param {string} [userAgent] 
         * @param {string} [output] Desired output format (json or xml).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserAgentDetails: async (userAgent?: string, output?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user-agent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarQueryParameter, "apiKey", configuration)

            if (output !== undefined) {
                localVarQueryParameter['output'] = output;
            }


    
            if (userAgent != null) {
                localVarHeaderParameter['User-Agent'] = String(userAgent);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to perform the parsing of multiple User-Angent strings (max. 50,000) at the same time. The requests count per round is equal to total User-Agent strings passed. This feature is `only available for paid plans`.
         * @summary Handle multiple user-agent string lookups
         * @param {string} [output] Desired output format (json or xml).
         * @param {ParseBulkUserAgentStringsRequest} [parseBulkUserAgentStringsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        parseBulkUserAgentStrings: async (output?: string, parseBulkUserAgentStringsRequest?: ParseBulkUserAgentStringsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user-agent-bulk`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarQueryParameter, "apiKey", configuration)

            if (output !== undefined) {
                localVarQueryParameter['output'] = output;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(parseBulkUserAgentStringsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * You can also provide custom User-Agent string to parse in JSON payload. This endpoint is meant to be called from server-side and is available for paid subscriptions only.
         * @summary Handle single User-Agent string
         * @param {string} [output] Desired output format (json or xml).
         * @param {ParseUserAgentStringRequest} [parseUserAgentStringRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        parseUserAgentString: async (output?: string, parseUserAgentStringRequest?: ParseUserAgentStringRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user-agent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarQueryParameter, "apiKey", configuration)

            if (output !== undefined) {
                localVarQueryParameter['output'] = output;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(parseUserAgentStringRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserAgentApi - functional programming interface
 * @export
 */
export const UserAgentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserAgentApiAxiosParamCreator(configuration)
    return {
        /**
         * User Agent Parser API provides the accurate browser, device, and operating system details from a User Agent String. It also provides information about crawlers and attack sources. You can use these details to customize user experience, prevent crawlers and attackers from accessing your website. 
         * @summary Get details of user-agent
         * @param {string} [userAgent] 
         * @param {string} [output] Desired output format (json or xml).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserAgentDetails(userAgent?: string, output?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserAgentData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserAgentDetails(userAgent, output, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserAgentApi.getUserAgentDetails']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This endpoint allows you to perform the parsing of multiple User-Angent strings (max. 50,000) at the same time. The requests count per round is equal to total User-Agent strings passed. This feature is `only available for paid plans`.
         * @summary Handle multiple user-agent string lookups
         * @param {string} [output] Desired output format (json or xml).
         * @param {ParseBulkUserAgentStringsRequest} [parseBulkUserAgentStringsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async parseBulkUserAgentStrings(output?: string, userAgents?: string[], options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserAgentData>>> {
            const parseBulkUserAgentStringsRequest = { uaStrings: userAgents };
            const localVarAxiosArgs = await localVarAxiosParamCreator.parseBulkUserAgentStrings(output, parseBulkUserAgentStringsRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserAgentApi.parseBulkUserAgentStrings']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * You can also provide custom User-Agent string to parse in JSON payload. This endpoint is meant to be called from server-side and is available for paid subscriptions only.
         * @summary Handle single User-Agent string
         * @param {string} [output] Desired output format (json or xml).
         * @param {ParseUserAgentStringRequest} [parseUserAgentStringRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async parseUserAgentString(output?: string, parseUserAgentStringRequest?: ParseUserAgentStringRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserAgentData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.parseUserAgentString(output, parseUserAgentStringRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserAgentApi.parseUserAgentString']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserAgentApi - factory interface
 * @export
 */
export const UserAgentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserAgentApiFp(configuration)
    return {
        /**
         * User Agent Parser API provides the accurate browser, device, and operating system details from a User Agent String. It also provides information about crawlers and attack sources. You can use these details to customize user experience, prevent crawlers and attackers from accessing your website. 
         * @summary Get details of user-agent
         * @param {UserAgentApiGetUserAgentDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserAgentDetails(requestParameters: UserAgentApiGetUserAgentDetailsRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<UserAgentData> {
            return localVarFp.getUserAgentDetails(requestParameters.userAgent, requestParameters.output, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to perform the parsing of multiple User-Angent strings (max. 50,000) at the same time. The requests count per round is equal to total User-Agent strings passed. This feature is `only available for paid plans`.
         * @summary Handle multiple user-agent string lookups
         * @param {UserAgentApiParseBulkUserAgentStringsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        parseBulkUserAgentStrings(requestParameters: UserAgentApiParseBulkUserAgentStringsRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<Array<UserAgentData>> {
            return localVarFp.parseBulkUserAgentStrings(requestParameters.output, requestParameters.userAgents, options).then((request) => request(axios, basePath));
        },
        /**
         * You can also provide custom User-Agent string to parse in JSON payload. This endpoint is meant to be called from server-side and is available for paid subscriptions only.
         * @summary Handle single User-Agent string
         * @param {UserAgentApiParseUserAgentStringRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        parseUserAgentString(requestParameters: UserAgentApiParseUserAgentStringRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<UserAgentData> {
            return localVarFp.parseUserAgentString(requestParameters.output, requestParameters.parseUserAgentStringRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getUserAgentDetails operation in UserAgentApi.
 * @export
 * @interface UserAgentApiGetUserAgentDetailsRequest
 */
export interface UserAgentApiGetUserAgentDetailsRequest {
    /**
     * 
     * @type {string}
     * @memberof UserAgentApiGetUserAgentDetails
     */
    readonly userAgent?: string

    /**
     * Desired output format (json or xml).
     * @type {string}
     * @memberof UserAgentApiGetUserAgentDetails
     */
    readonly output?: string
}

/**
 * Request parameters for parseBulkUserAgentStrings operation in UserAgentApi.
 * @export
 * @interface UserAgentApiParseBulkUserAgentStringsRequest
 */
export interface UserAgentApiParseBulkUserAgentStringsRequest {
    /**
     * Desired output format (json or xml).
     * @type {string}
     * @memberof UserAgentApiParseBulkUserAgentStrings
     */
    readonly output?: string

    /**
     * 
     * @type {ParseBulkUserAgentStringsRequest}
     * @memberof UserAgentApiParseBulkUserAgentStrings
     */
    readonly userAgents?: string[];
}

/**
 * Request parameters for parseUserAgentString operation in UserAgentApi.
 * @export
 * @interface UserAgentApiParseUserAgentStringRequest
 */
export interface UserAgentApiParseUserAgentStringRequest {
    /**
     * Desired output format (json or xml).
     * @type {string}
     * @memberof UserAgentApiParseUserAgentString
     */
    readonly output?: string

    /**
     * 
     * @type {ParseUserAgentStringRequest}
     * @memberof UserAgentApiParseUserAgentString
     */
    readonly parseUserAgentStringRequest?: ParseUserAgentStringRequest
}

/**
 * UserAgentApi - object-oriented interface
 * @export
 * @class UserAgentApi
 * @extends {BaseAPI}
 */
export class UserAgentApi extends BaseAPI {
    /**
     * User Agent Parser API provides the accurate browser, device, and operating system details from a User Agent String. It also provides information about crawlers and attack sources. You can use these details to customize user experience, prevent crawlers and attackers from accessing your website. 
     * @summary Get details of user-agent
     * @param {UserAgentApiGetUserAgentDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAgentApi
     */
    public getUserAgentDetails(requestParameters: UserAgentApiGetUserAgentDetailsRequest = {}, options?: RawAxiosRequestConfig) {
        return UserAgentApiFp(this.configuration).getUserAgentDetails(requestParameters.userAgent, requestParameters.output, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to perform the parsing of multiple User-Angent strings (max. 50,000) at the same time. The requests count per round is equal to total User-Agent strings passed. This feature is `only available for paid plans`.
     * @summary Handle multiple user-agent string lookups
     * @param {UserAgentApiParseBulkUserAgentStringsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAgentApi
     */
    public parseBulkUserAgentStrings(requestParameters: UserAgentApiParseBulkUserAgentStringsRequest = {}, options?: RawAxiosRequestConfig) {
        return UserAgentApiFp(this.configuration).parseBulkUserAgentStrings(requestParameters.output, requestParameters.userAgents, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * You can also provide custom User-Agent string to parse in JSON payload. This endpoint is meant to be called from server-side and is available for paid subscriptions only.
     * @summary Handle single User-Agent string
     * @param {UserAgentApiParseUserAgentStringRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAgentApi
     */
    public parseUserAgentString(requestParameters: UserAgentApiParseUserAgentStringRequest = {}, options?: RawAxiosRequestConfig) {
        return UserAgentApiFp(this.configuration).parseUserAgentString(requestParameters.output, requestParameters.parseUserAgentStringRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

