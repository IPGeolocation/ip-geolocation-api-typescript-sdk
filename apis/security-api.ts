/* tslint:disable */
/* eslint-disable */
/**
 * IPGeolocation.io - IP intelligence products
 * Ipgeolocation provides a set of APIs to make ip based decisions.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ErrorResponse } from '../models';
// @ts-ignore
import type { ErrorXMLResponse } from '../models';
// @ts-ignore
import type { GetBulkIpGeolocationRequest } from '../models';
// @ts-ignore
import type { GetBulkIpSecurityInfo200ResponseInner } from '../models';
// @ts-ignore
import type { GetBulkIpSecurityInfo200ResponseInner1 } from '../models';
// @ts-ignore
import type { SecurityAPIResponse } from '../models';
// @ts-ignore
import type { SecurityAPIXMLResponse } from '../models';
/**
 * SecurityApi - axios parameter creator
 * @export
 */
export const SecurityApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * The Bulk IP Security Lookup API can provide security details for up to `50,000` bulk IPs. This API also has parameters to customize the response, just like the single IP Security Lookup API.
         * @param {GetBulkIpGeolocationRequest} getBulkIpGeolocationRequest 
         * @param {string} [include] Include optional objects like &#x60;location&#x60;, &#x60;network&#x60;.  Use comma-separated values. Example: include&#x3D;location,network 
         * @param {string} [fields] Get specific fields, objects from the response.
         * @param {string} [excludes] Exclude specific fields, objects from the response.
         * @param {string} [output] Desired output format.
         * @param {GetBulkIpSecurityInfoLangEnum} [lang] By default, the API responds in English. You can change the response language by passing the language code as a query parameter &#x60;lang&#x60;. Multi language feature is available only for &#x60;paid users&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBulkIpSecurityInfo: async (getBulkIpGeolocationRequest: GetBulkIpGeolocationRequest, include?: string, fields?: string, excludes?: string, output?: string, lang?: GetBulkIpSecurityInfoLangEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'getBulkIpGeolocationRequest' is not null or undefined
            assertParamExists('getBulkIpSecurityInfo', 'getBulkIpGeolocationRequest', getBulkIpGeolocationRequest)
            const localVarPath = `/security-bulk`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarQueryParameter, "apiKey", configuration)

            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (excludes !== undefined) {
                localVarQueryParameter['excludes'] = excludes;
            }

            if (output !== undefined) {
                localVarQueryParameter['output'] = output;
            }

            if (lang !== undefined) {
                localVarQueryParameter['lang'] = lang;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getBulkIpGeolocationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * IP Security API provides security details of a given IP. It detects whether the IP is proxy, tor or bot. It also shows the proxy types of the IP (like VPN, PROXY, RELAY etc.) with it\'s VPN/proxy service provider making our API powerful VPN checker. It finds the IPs that are involved in spam activities. It also checks whether the IP links to a cloud provider and includes the provider\'s name.
         * @param {string} [ip] query parameter \&#39;ip\&#39;. If not provided, will be your network IP
         * @param {string} [include] Include optional details like location and/or network.
         * @param {string} [fields] Get specific fields, objects from the response.
         * @param {string} [excludes] Exclude specific fields, objects from the response.
         * @param {string} [output] Desired output format (json or xml).
         * @param {GetIpSecurityInfoLangEnum} [lang] By default, the API responds in English. You can change the response language by passing the language code as a query parameter &#x60;lang&#x60;. Multi language feature is available only for &#x60;paid users&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIpSecurityInfo: async (ip?: string, include?: string, fields?: string, excludes?: string, output?: string, lang?: GetIpSecurityInfoLangEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/security`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarQueryParameter, "apiKey", configuration)

            if (ip !== undefined) {
                localVarQueryParameter['ip'] = ip;
            }

            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (excludes !== undefined) {
                localVarQueryParameter['excludes'] = excludes;
            }

            if (output !== undefined) {
                localVarQueryParameter['output'] = output;
            }

            if (lang !== undefined) {
                localVarQueryParameter['lang'] = lang;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SecurityApi - functional programming interface
 * @export
 */
export const SecurityApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SecurityApiAxiosParamCreator(configuration)
    return {
        /**
         * The Bulk IP Security Lookup API can provide security details for up to `50,000` bulk IPs. This API also has parameters to customize the response, just like the single IP Security Lookup API.
         * @param {GetBulkIpGeolocationRequest} getBulkIpGeolocationRequest 
         * @param {string} [include] Include optional objects like &#x60;location&#x60;, &#x60;network&#x60;.  Use comma-separated values. Example: include&#x3D;location,network 
         * @param {string} [fields] Get specific fields, objects from the response.
         * @param {string} [excludes] Exclude specific fields, objects from the response.
         * @param {string} [output] Desired output format.
         * @param {GetBulkIpSecurityInfoLangEnum} [lang] By default, the API responds in English. You can change the response language by passing the language code as a query parameter &#x60;lang&#x60;. Multi language feature is available only for &#x60;paid users&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBulkIpSecurityInfo(ips: string[], include?: string, fields?: string, excludes?: string, output?: string, lang?: GetBulkIpSecurityInfoLangEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetBulkIpSecurityInfo200ResponseInner>>> {
            const getBulkIpGeolocationRequest = { ips };
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBulkIpSecurityInfo(getBulkIpGeolocationRequest, include, fields, excludes, output, lang, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SecurityApi.getBulkIpSecurityInfo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * IP Security API provides security details of a given IP. It detects whether the IP is proxy, tor or bot. It also shows the proxy types of the IP (like VPN, PROXY, RELAY etc.) with it\'s VPN/proxy service provider making our API powerful VPN checker. It finds the IPs that are involved in spam activities. It also checks whether the IP links to a cloud provider and includes the provider\'s name.
         * @param {string} [ip] query parameter \&#39;ip\&#39;. If not provided, will be your network IP
         * @param {string} [include] Include optional details like location and/or network.
         * @param {string} [fields] Get specific fields, objects from the response.
         * @param {string} [excludes] Exclude specific fields, objects from the response.
         * @param {string} [output] Desired output format (json or xml).
         * @param {GetIpSecurityInfoLangEnum} [lang] By default, the API responds in English. You can change the response language by passing the language code as a query parameter &#x60;lang&#x60;. Multi language feature is available only for &#x60;paid users&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIpSecurityInfo(ip?: string, include?: string, fields?: string, excludes?: string, output?: string, lang?: GetIpSecurityInfoLangEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SecurityAPIResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIpSecurityInfo(ip, include, fields, excludes, output, lang, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SecurityApi.getIpSecurityInfo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SecurityApi - factory interface
 * @export
 */
export const SecurityApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SecurityApiFp(configuration)
    return {
        /**
         * The Bulk IP Security Lookup API can provide security details for up to `50,000` bulk IPs. This API also has parameters to customize the response, just like the single IP Security Lookup API.
         * @param {SecurityApiGetBulkIpSecurityInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBulkIpSecurityInfo(requestParameters: SecurityApiGetBulkIpSecurityInfoRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetBulkIpSecurityInfo200ResponseInner>> {
            return localVarFp.getBulkIpSecurityInfo(requestParameters.ips, requestParameters.include, requestParameters.fields, requestParameters.excludes, requestParameters.output, requestParameters.lang, options).then((request) => request(axios, basePath));
        },
        /**
         * IP Security API provides security details of a given IP. It detects whether the IP is proxy, tor or bot. It also shows the proxy types of the IP (like VPN, PROXY, RELAY etc.) with it\'s VPN/proxy service provider making our API powerful VPN checker. It finds the IPs that are involved in spam activities. It also checks whether the IP links to a cloud provider and includes the provider\'s name.
         * @param {SecurityApiGetIpSecurityInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIpSecurityInfo(requestParameters: SecurityApiGetIpSecurityInfoRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<SecurityAPIResponse> {
            return localVarFp.getIpSecurityInfo(requestParameters.ip, requestParameters.include, requestParameters.fields, requestParameters.excludes, requestParameters.output, requestParameters.lang, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getBulkIpSecurityInfo operation in SecurityApi.
 * @export
 * @interface SecurityApiGetBulkIpSecurityInfoRequest
 */
export interface SecurityApiGetBulkIpSecurityInfoRequest {
    /**
     * 
     * @type {GetBulkIpGeolocationRequest}
     * @memberof SecurityApiGetBulkIpSecurityInfo
     */
    readonly ips: string[];

    /**
     * Include optional objects like &#x60;location&#x60;, &#x60;network&#x60;.  Use comma-separated values. Example: include&#x3D;location,network 
     * @type {string}
     * @memberof SecurityApiGetBulkIpSecurityInfo
     */
    readonly include?: string

    /**
     * Get specific fields, objects from the response.
     * @type {string}
     * @memberof SecurityApiGetBulkIpSecurityInfo
     */
    readonly fields?: string

    /**
     * Exclude specific fields, objects from the response.
     * @type {string}
     * @memberof SecurityApiGetBulkIpSecurityInfo
     */
    readonly excludes?: string

    /**
     * Desired output format.
     * @type {string}
     * @memberof SecurityApiGetBulkIpSecurityInfo
     */
    readonly output?: string

    /**
     * By default, the API responds in English. You can change the response language by passing the language code as a query parameter &#x60;lang&#x60;. Multi language feature is available only for &#x60;paid users&#x60;.
     * @type {'en' | 'de' | 'ru' | 'ja' | 'fr' | 'cn' | 'es' | 'cs' | 'it' | 'ko' | 'fa' | 'pt'}
     * @memberof SecurityApiGetBulkIpSecurityInfo
     */
    readonly lang?: GetBulkIpSecurityInfoLangEnum
}

/**
 * Request parameters for getIpSecurityInfo operation in SecurityApi.
 * @export
 * @interface SecurityApiGetIpSecurityInfoRequest
 */
export interface SecurityApiGetIpSecurityInfoRequest {
    /**
     * query parameter \&#39;ip\&#39;. If not provided, will be your network IP
     * @type {string}
     * @memberof SecurityApiGetIpSecurityInfo
     */
    readonly ip?: string

    /**
     * Include optional details like location and/or network.
     * @type {string}
     * @memberof SecurityApiGetIpSecurityInfo
     */
    readonly include?: string

    /**
     * Get specific fields, objects from the response.
     * @type {string}
     * @memberof SecurityApiGetIpSecurityInfo
     */
    readonly fields?: string

    /**
     * Exclude specific fields, objects from the response.
     * @type {string}
     * @memberof SecurityApiGetIpSecurityInfo
     */
    readonly excludes?: string

    /**
     * Desired output format (json or xml).
     * @type {string}
     * @memberof SecurityApiGetIpSecurityInfo
     */
    readonly output?: string

    /**
     * By default, the API responds in English. You can change the response language by passing the language code as a query parameter &#x60;lang&#x60;. Multi language feature is available only for &#x60;paid users&#x60;.
     * @type {'en' | 'de' | 'ru' | 'ja' | 'fr' | 'cn' | 'es' | 'cs' | 'it' | 'ko' | 'fa' | 'pt'}
     * @memberof SecurityApiGetIpSecurityInfo
     */
    readonly lang?: GetIpSecurityInfoLangEnum
}

/**
 * SecurityApi - object-oriented interface
 * @export
 * @class SecurityApi
 * @extends {BaseAPI}
 */
export class IPSecurityApi extends BaseAPI {
    /**
     * The Bulk IP Security Lookup API can provide security details for up to `50,000` bulk IPs. This API also has parameters to customize the response, just like the single IP Security Lookup API.
     * @param {SecurityApiGetBulkIpSecurityInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApi
     */
    public getBulkIpSecurityInfo(requestParameters: SecurityApiGetBulkIpSecurityInfoRequest, options?: RawAxiosRequestConfig) {
        return SecurityApiFp(this.configuration).getBulkIpSecurityInfo(requestParameters.ips, requestParameters.include, requestParameters.fields, requestParameters.excludes, requestParameters.output, requestParameters.lang, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * IP Security API provides security details of a given IP. It detects whether the IP is proxy, tor or bot. It also shows the proxy types of the IP (like VPN, PROXY, RELAY etc.) with it\'s VPN/proxy service provider making our API powerful VPN checker. It finds the IPs that are involved in spam activities. It also checks whether the IP links to a cloud provider and includes the provider\'s name.
     * @param {SecurityApiGetIpSecurityInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApi
     */
    public getIpSecurityInfo(requestParameters: SecurityApiGetIpSecurityInfoRequest = {}, options?: RawAxiosRequestConfig) {
        return SecurityApiFp(this.configuration).getIpSecurityInfo(requestParameters.ip, requestParameters.include, requestParameters.fields, requestParameters.excludes, requestParameters.output, requestParameters.lang, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetBulkIpSecurityInfoLangEnum = {
    En: 'en',
    De: 'de',
    Ru: 'ru',
    Ja: 'ja',
    Fr: 'fr',
    Cn: 'cn',
    Es: 'es',
    Cs: 'cs',
    It: 'it',
    Ko: 'ko',
    Fa: 'fa',
    Pt: 'pt'
} as const;
export type GetBulkIpSecurityInfoLangEnum = typeof GetBulkIpSecurityInfoLangEnum[keyof typeof GetBulkIpSecurityInfoLangEnum];
/**
 * @export
 */
export const GetIpSecurityInfoLangEnum = {
    En: 'en',
    De: 'de',
    Ru: 'ru',
    Ja: 'ja',
    Fr: 'fr',
    Cn: 'cn',
    Es: 'es',
    Cs: 'cs',
    It: 'it',
    Ko: 'ko',
    Fa: 'fa',
    Pt: 'pt'
} as const;
export type GetIpSecurityInfoLangEnum = typeof GetIpSecurityInfoLangEnum[keyof typeof GetIpSecurityInfoLangEnum];
