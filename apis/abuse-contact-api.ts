/* tslint:disable */
/* eslint-disable */
/**
 * IPGeolocation.io - IP intelligence products
 * Ipgeolocation provides a set of APIs to make ip based decisions.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { AbuseResponse } from '../models';
// @ts-ignore
import type { AbuseResponseXML } from '../models';
// @ts-ignore
import type { ErrorResponse } from '../models';
// @ts-ignore
import type { ErrorXMLResponse } from '../models';
/**
 * AbuseContactApi - axios parameter creator
 * @export
 */
export const AbuseContactApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * The Abuse Contact API provides essential contact information to report abusive activity associated with IP addresses. By querying an IP address (IPv4 or IPv6), users receive detailed abuse contact data, including the responsible organization, abuse handling role, contact emails, phone numbers, and registered address. This enables users to swiftly take action to report and mitigate threats such as spam, DDoS attacks, and phishing.     In addition to abuse-specific contacts, the API also includes registration metadata like the registered country and abuse handle. This empowers cybersecurity teams, hosting providers, and compliance entities to take appropriate legal or administrative action. 
         * @param {string} [ip] query parameter \&#39;ip\&#39;.
         * @param {string} [excludes] You can exclude specific fields from the API response (except the ip field) by listing them in the excludes parameter as a comma-separated list. For example, you want to remove emails and handle from api response, you can put the keys in excludes parameter like this.
         * @param {string} [fields] You can customize the API response by using the fields parameter to include only the specific data you need. For example, to retrieve only the role and emails, specify these keys in the fields parameter as shown below.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAbuseContactInfo: async (ip?: string, excludes?: string, fields?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/abuse`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarQueryParameter, "apiKey", configuration)

            if (ip !== undefined) {
                localVarQueryParameter['ip'] = ip;
            }

            if (excludes !== undefined) {
                localVarQueryParameter['excludes'] = excludes;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AbuseContactApi - functional programming interface
 * @export
 */
export const AbuseContactApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AbuseContactApiAxiosParamCreator(configuration)
    return {
        /**
         * The Abuse Contact API provides essential contact information to report abusive activity associated with IP addresses. By querying an IP address (IPv4 or IPv6), users receive detailed abuse contact data, including the responsible organization, abuse handling role, contact emails, phone numbers, and registered address. This enables users to swiftly take action to report and mitigate threats such as spam, DDoS attacks, and phishing.     In addition to abuse-specific contacts, the API also includes registration metadata like the registered country and abuse handle. This empowers cybersecurity teams, hosting providers, and compliance entities to take appropriate legal or administrative action. 
         * @param {string} [ip] query parameter \&#39;ip\&#39;.
         * @param {string} [excludes] You can exclude specific fields from the API response (except the ip field) by listing them in the excludes parameter as a comma-separated list. For example, you want to remove emails and handle from api response, you can put the keys in excludes parameter like this.
         * @param {string} [fields] You can customize the API response by using the fields parameter to include only the specific data you need. For example, to retrieve only the role and emails, specify these keys in the fields parameter as shown below.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAbuseContactInfo(ip?: string, excludes?: string, fields?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AbuseResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAbuseContactInfo(ip, excludes, fields, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AbuseContactApi.getAbuseContactInfo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AbuseContactApi - factory interface
 * @export
 */
export const AbuseContactApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AbuseContactApiFp(configuration)
    return {
        /**
         * The Abuse Contact API provides essential contact information to report abusive activity associated with IP addresses. By querying an IP address (IPv4 or IPv6), users receive detailed abuse contact data, including the responsible organization, abuse handling role, contact emails, phone numbers, and registered address. This enables users to swiftly take action to report and mitigate threats such as spam, DDoS attacks, and phishing.     In addition to abuse-specific contacts, the API also includes registration metadata like the registered country and abuse handle. This empowers cybersecurity teams, hosting providers, and compliance entities to take appropriate legal or administrative action. 
         * @param {AbuseContactApiGetAbuseContactInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAbuseContactInfo(requestParameters: AbuseContactApiGetAbuseContactInfoRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<AbuseResponse> {
            return localVarFp.getAbuseContactInfo(requestParameters.ip, requestParameters.excludes, requestParameters.fields, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getAbuseContactInfo operation in AbuseContactApi.
 * @export
 * @interface AbuseContactApiGetAbuseContactInfoRequest
 */
export interface AbuseContactApiGetAbuseContactInfoRequest {
    /**
     * query parameter \&#39;ip\&#39;.
     * @type {string}
     * @memberof AbuseContactApiGetAbuseContactInfo
     */
    readonly ip?: string

    /**
     * You can exclude specific fields from the API response (except the ip field) by listing them in the excludes parameter as a comma-separated list. For example, you want to remove emails and handle from api response, you can put the keys in excludes parameter like this.
     * @type {string}
     * @memberof AbuseContactApiGetAbuseContactInfo
     */
    readonly excludes?: string

    /**
     * You can customize the API response by using the fields parameter to include only the specific data you need. For example, to retrieve only the role and emails, specify these keys in the fields parameter as shown below.
     * @type {string}
     * @memberof AbuseContactApiGetAbuseContactInfo
     */
    readonly fields?: string
}

/**
 * AbuseContactApi - object-oriented interface
 * @export
 * @class AbuseContactApi
 * @extends {BaseAPI}
 */
export class AbuseContactApi extends BaseAPI {
    /**
     * The Abuse Contact API provides essential contact information to report abusive activity associated with IP addresses. By querying an IP address (IPv4 or IPv6), users receive detailed abuse contact data, including the responsible organization, abuse handling role, contact emails, phone numbers, and registered address. This enables users to swiftly take action to report and mitigate threats such as spam, DDoS attacks, and phishing.     In addition to abuse-specific contacts, the API also includes registration metadata like the registered country and abuse handle. This empowers cybersecurity teams, hosting providers, and compliance entities to take appropriate legal or administrative action. 
     * @param {AbuseContactApiGetAbuseContactInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AbuseContactApi
     */
    public getAbuseContactInfo(requestParameters: AbuseContactApiGetAbuseContactInfoRequest = {}, options?: RawAxiosRequestConfig) {
        return AbuseContactApiFp(this.configuration).getAbuseContactInfo(requestParameters.ip, requestParameters.excludes, requestParameters.fields, options).then((request) => request(this.axios, this.basePath));
    }
}

