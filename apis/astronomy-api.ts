/* tslint:disable */
/* eslint-disable */
/**
 * IPGeolocation.io - IP intelligence products
 * Ipgeolocation provides a set of APIs to make ip based decisions.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { AstronomyResponse } from '../models';
// @ts-ignore
import type { AstronomyXMLResponse } from '../models';
// @ts-ignore
import type { ErrorResponse } from '../models';
// @ts-ignore
import type { ErrorXMLResponse } from '../models';
/**
 * AstronomyApi - axios parameter creator
 * @export
 */
export const AstronomyApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * The Astronomy API provides the location-based rise and set times for the Sun and Moon along with the current position, distance from earth, and azimuth of the Sun and the Moon for a specific date at the queried time. 
         * @param {string} [ip] query paramter \&#39;ip\&#39;. If not provided, will be your network IP
         * @param {string} [location] query paramter \&#39;location\&#39;. If not provided, will be your ip location
         * @param {string} [lat] query paramter \&#39;lat\&#39;.
         * @param {string} [_long] query paramter \&#39;long\&#39;.
         * @param {string} [date] The date (YYYY-MM-DD) to lookup for. default will be the current date
         * @param {number} [elevation] query parameter \&#39;elevation\&#39;
         * @param {string} [output] Desired output format.
         * @param {GetAstronomyDetailsLangEnum} [lang] By default, the API responds in English. You can change the response language by passing the language code as a query parameter &#x60;lang&#x60;. Multi language feature is available only for &#x60;paid users&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAstronomyDetails: async (ip?: string, location?: string, lat?: string, _long?: string, date?: string, elevation?: number, output?: string, lang?: GetAstronomyDetailsLangEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/astronomy`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarQueryParameter, "apiKey", configuration)

            if (ip !== undefined) {
                localVarQueryParameter['ip'] = ip;
            }

            if (location !== undefined) {
                localVarQueryParameter['location'] = location;
            }

            if (lat !== undefined) {
                localVarQueryParameter['lat'] = lat;
            }

            if (_long !== undefined) {
                localVarQueryParameter['long'] = _long;
            }

            if (date !== undefined) {
                localVarQueryParameter['date'] = date;
            }

            if (elevation !== undefined) {
                localVarQueryParameter['elevation'] = elevation;
            }

            if (output !== undefined) {
                localVarQueryParameter['output'] = output;
            }

            if (lang !== undefined) {
                localVarQueryParameter['lang'] = lang;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AstronomyApi - functional programming interface
 * @export
 */
export const AstronomyApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AstronomyApiAxiosParamCreator(configuration)
    return {
        /**
         * The Astronomy API provides the location-based rise and set times for the Sun and Moon along with the current position, distance from earth, and azimuth of the Sun and the Moon for a specific date at the queried time. 
         * @param {string} [ip] query paramter \&#39;ip\&#39;. If not provided, will be your network IP
         * @param {string} [location] query paramter \&#39;location\&#39;. If not provided, will be your ip location
         * @param {string} [lat] query paramter \&#39;lat\&#39;.
         * @param {string} [_long] query paramter \&#39;long\&#39;.
         * @param {string} [date] The date (YYYY-MM-DD) to lookup for. default will be the current date
         * @param {number} [elevation] query parameter \&#39;elevation\&#39;
         * @param {string} [output] Desired output format.
         * @param {GetAstronomyDetailsLangEnum} [lang] By default, the API responds in English. You can change the response language by passing the language code as a query parameter &#x60;lang&#x60;. Multi language feature is available only for &#x60;paid users&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAstronomyDetails(ip?: string, location?: string, lat?: string, _long?: string, date?: string, elevation?: number, output?: string, lang?: GetAstronomyDetailsLangEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AstronomyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAstronomyDetails(ip, location, lat, _long, date, elevation, output, lang, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AstronomyApi.getAstronomyDetails']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AstronomyApi - factory interface
 * @export
 */
export const AstronomyApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AstronomyApiFp(configuration)
    return {
        /**
         * The Astronomy API provides the location-based rise and set times for the Sun and Moon along with the current position, distance from earth, and azimuth of the Sun and the Moon for a specific date at the queried time. 
         * @param {AstronomyApiGetAstronomyDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAstronomyDetails(requestParameters: AstronomyApiGetAstronomyDetailsRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<AstronomyResponse> {
            return localVarFp.getAstronomyDetails(requestParameters.ip, requestParameters.location, requestParameters.lat, requestParameters._long, requestParameters.date, requestParameters.elevation, requestParameters.output, requestParameters.lang, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getAstronomyDetails operation in AstronomyApi.
 * @export
 * @interface AstronomyApiGetAstronomyDetailsRequest
 */
export interface AstronomyApiGetAstronomyDetailsRequest {
    /**
     * query paramter \&#39;ip\&#39;. If not provided, will be your network IP
     * @type {string}
     * @memberof AstronomyApiGetAstronomyDetails
     */
    readonly ip?: string

    /**
     * query paramter \&#39;location\&#39;. If not provided, will be your ip location
     * @type {string}
     * @memberof AstronomyApiGetAstronomyDetails
     */
    readonly location?: string

    /**
     * query paramter \&#39;lat\&#39;.
     * @type {string}
     * @memberof AstronomyApiGetAstronomyDetails
     */
    readonly lat?: string

    /**
     * query paramter \&#39;long\&#39;.
     * @type {string}
     * @memberof AstronomyApiGetAstronomyDetails
     */
    readonly _long?: string

    /**
     * The date (YYYY-MM-DD) to lookup for. default will be the current date
     * @type {string}
     * @memberof AstronomyApiGetAstronomyDetails
     */
    readonly date?: string

    /**
     * query parameter \&#39;elevation\&#39;
     * @type {number}
     * @memberof AstronomyApiGetAstronomyDetails
     */
    readonly elevation?: number

    /**
     * Desired output format.
     * @type {string}
     * @memberof AstronomyApiGetAstronomyDetails
     */
    readonly output?: string

    /**
     * By default, the API responds in English. You can change the response language by passing the language code as a query parameter &#x60;lang&#x60;. Multi language feature is available only for &#x60;paid users&#x60;.
     * @type {'en' | 'de' | 'ru' | 'ja' | 'fr' | 'cn' | 'es' | 'cs' | 'it' | 'ko' | 'fa' | 'pt'}
     * @memberof AstronomyApiGetAstronomyDetails
     */
    readonly lang?: GetAstronomyDetailsLangEnum
}

/**
 * AstronomyApi - object-oriented interface
 * @export
 * @class AstronomyApi
 * @extends {BaseAPI}
 */
export class AstronomyApi extends BaseAPI {
    /**
     * The Astronomy API provides the location-based rise and set times for the Sun and Moon along with the current position, distance from earth, and azimuth of the Sun and the Moon for a specific date at the queried time. 
     * @param {AstronomyApiGetAstronomyDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AstronomyApi
     */
    public getAstronomyDetails(requestParameters: AstronomyApiGetAstronomyDetailsRequest = {}, options?: RawAxiosRequestConfig) {
        return AstronomyApiFp(this.configuration).getAstronomyDetails(requestParameters.ip, requestParameters.location, requestParameters.lat, requestParameters._long, requestParameters.date, requestParameters.elevation, requestParameters.output, requestParameters.lang, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetAstronomyDetailsLangEnum = {
    En: 'en',
    De: 'de',
    Ru: 'ru',
    Ja: 'ja',
    Fr: 'fr',
    Cn: 'cn',
    Es: 'es',
    Cs: 'cs',
    It: 'it',
    Ko: 'ko',
    Fa: 'fa',
    Pt: 'pt'
} as const;
export type GetAstronomyDetailsLangEnum = typeof GetAstronomyDetailsLangEnum[keyof typeof GetAstronomyDetailsLangEnum];
