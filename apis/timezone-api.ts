/* tslint:disable */
/* eslint-disable */
/**
 * IPGeolocation.io - IP intelligence products
 * Ipgeolocation provides a set of APIs to make ip based decisions.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ErrorResponse } from '../models';
// @ts-ignore
import type { ErrorXMLResponse } from '../models';
// @ts-ignore
import type { TimeZoneDetailedResponse } from '../models';
// @ts-ignore
import type { TimeZoneDetailedXMLResponse } from '../models';
/**
 * TimezoneApi - axios parameter creator
 * @export
 */
export const TimezoneApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * The Time Zone API provides current time, date, and time zone-related information. It supports various input types including time zone name, geographic coordinates, addresses, IPs, and location codes.  The API determines the time zone based on the following priority order if multiple parameters are provided:   1. Time Zone Name   2. Geographic Coordinates (latitude & longitude)   3. Location Address   4. IP Address   5. IATA Code   6. ICAO Code   7. UN/LOCODE  Enriched response data is returned based on the type of input: - IP: includes geolocation info - Address: includes location metadata - IATA/ICAO: includes airport info - UN/LOCODE: includes city details  You can call the time zone API without passing any time zone, coordinates, IATA, ICAO, LO code or IP address as well. It will use the calling machine\'s IP address to return the regional time zone information. 
         * @summary Timezone information details
         * @param {string} [tz] pass a valid time zone name as a query parameter tz to get the time zone information.
         * @param {string} [location] pass any address of a location as the query parameter location to get the time zone information.
         * @param {number} [lat] pass the latitude of a location as query parameters to get the time zone information.
         * @param {number} [_long] pass the longitude of a location as query parameters to get the time zone information.
         * @param {string} [ip] You can pass any IPv4 or IPv6 address as a query parameter ip to get the regional timezone information.
         * @param {string} [iataCode] pass any 3 letter IATA code as a query paramter iata_code to get the comprehensive airport details along with the time zone information, in which that airport exists.
         * @param {string} [icaoCode] pass any 4 letter ICAO code as a query paramter icao_code to get the comprehensive airport details along with the time zone information, in which that airport exists.
         * @param {string} [loCode] pass any 5 letter UNLOCODE as a query paramter lo_code to get the comprehensive lo code/city details along with the time zone information of the concerned city.
         * @param {string} [output] Desired output format (json or xml).
         * @param {GetTimezoneInfoLangEnum} [lang] By default, the API responds in English. You can change the response language by passing the language code as a query parameter &#x60;lang&#x60;. Multi language feature is available only for &#x60;paid users&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTimezoneInfo: async (tz?: string, location?: string, lat?: number, _long?: number, ip?: string, iataCode?: string, icaoCode?: string, loCode?: string, output?: string, lang?: GetTimezoneInfoLangEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/timezone`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarQueryParameter, "apiKey", configuration)

            if (tz !== undefined) {
                localVarQueryParameter['tz'] = tz;
            }

            if (location !== undefined) {
                localVarQueryParameter['location'] = location;
            }

            if (lat !== undefined) {
                localVarQueryParameter['lat'] = lat;
            }

            if (_long !== undefined) {
                localVarQueryParameter['long'] = _long;
            }

            if (ip !== undefined) {
                localVarQueryParameter['ip'] = ip;
            }

            if (iataCode !== undefined) {
                localVarQueryParameter['iata_code'] = iataCode;
            }

            if (icaoCode !== undefined) {
                localVarQueryParameter['icao_code'] = icaoCode;
            }

            if (loCode !== undefined) {
                localVarQueryParameter['lo_code'] = loCode;
            }

            if (output !== undefined) {
                localVarQueryParameter['output'] = output;
            }

            if (lang !== undefined) {
                localVarQueryParameter['lang'] = lang;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TimezoneApi - functional programming interface
 * @export
 */
export const TimezoneApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TimezoneApiAxiosParamCreator(configuration)
    return {
        /**
         * The Time Zone API provides current time, date, and time zone-related information. It supports various input types including time zone name, geographic coordinates, addresses, IPs, and location codes.  The API determines the time zone based on the following priority order if multiple parameters are provided:   1. Time Zone Name   2. Geographic Coordinates (latitude & longitude)   3. Location Address   4. IP Address   5. IATA Code   6. ICAO Code   7. UN/LOCODE  Enriched response data is returned based on the type of input: - IP: includes geolocation info - Address: includes location metadata - IATA/ICAO: includes airport info - UN/LOCODE: includes city details  You can call the time zone API without passing any time zone, coordinates, IATA, ICAO, LO code or IP address as well. It will use the calling machine\'s IP address to return the regional time zone information. 
         * @summary Timezone information details
         * @param {string} [tz] pass a valid time zone name as a query parameter tz to get the time zone information.
         * @param {string} [location] pass any address of a location as the query parameter location to get the time zone information.
         * @param {number} [lat] pass the latitude of a location as query parameters to get the time zone information.
         * @param {number} [_long] pass the longitude of a location as query parameters to get the time zone information.
         * @param {string} [ip] You can pass any IPv4 or IPv6 address as a query parameter ip to get the regional timezone information.
         * @param {string} [iataCode] pass any 3 letter IATA code as a query paramter iata_code to get the comprehensive airport details along with the time zone information, in which that airport exists.
         * @param {string} [icaoCode] pass any 4 letter ICAO code as a query paramter icao_code to get the comprehensive airport details along with the time zone information, in which that airport exists.
         * @param {string} [loCode] pass any 5 letter UNLOCODE as a query paramter lo_code to get the comprehensive lo code/city details along with the time zone information of the concerned city.
         * @param {string} [output] Desired output format (json or xml).
         * @param {GetTimezoneInfoLangEnum} [lang] By default, the API responds in English. You can change the response language by passing the language code as a query parameter &#x60;lang&#x60;. Multi language feature is available only for &#x60;paid users&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTimezoneInfo(tz?: string, location?: string, lat?: number, _long?: number, ip?: string, iataCode?: string, icaoCode?: string, loCode?: string, output?: string, lang?: GetTimezoneInfoLangEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TimeZoneDetailedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTimezoneInfo(tz, location, lat, _long, ip, iataCode, icaoCode, loCode, output, lang, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TimezoneApi.getTimezoneInfo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TimezoneApi - factory interface
 * @export
 */
export const TimezoneApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TimezoneApiFp(configuration)
    return {
        /**
         * The Time Zone API provides current time, date, and time zone-related information. It supports various input types including time zone name, geographic coordinates, addresses, IPs, and location codes.  The API determines the time zone based on the following priority order if multiple parameters are provided:   1. Time Zone Name   2. Geographic Coordinates (latitude & longitude)   3. Location Address   4. IP Address   5. IATA Code   6. ICAO Code   7. UN/LOCODE  Enriched response data is returned based on the type of input: - IP: includes geolocation info - Address: includes location metadata - IATA/ICAO: includes airport info - UN/LOCODE: includes city details  You can call the time zone API without passing any time zone, coordinates, IATA, ICAO, LO code or IP address as well. It will use the calling machine\'s IP address to return the regional time zone information. 
         * @summary Timezone information details
         * @param {TimezoneApiGetTimezoneInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTimezoneInfo(requestParameters: TimezoneApiGetTimezoneInfoRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<TimeZoneDetailedResponse> {
            return localVarFp.getTimezoneInfo(requestParameters.tz, requestParameters.location, requestParameters.lat, requestParameters._long, requestParameters.ip, requestParameters.iataCode, requestParameters.icaoCode, requestParameters.loCode, requestParameters.output, requestParameters.lang, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getTimezoneInfo operation in TimezoneApi.
 * @export
 * @interface TimezoneApiGetTimezoneInfoRequest
 */
export interface TimezoneApiGetTimezoneInfoRequest {
    /**
     * pass a valid time zone name as a query parameter tz to get the time zone information.
     * @type {string}
     * @memberof TimezoneApiGetTimezoneInfo
     */
    readonly tz?: string

    /**
     * pass any address of a location as the query parameter location to get the time zone information.
     * @type {string}
     * @memberof TimezoneApiGetTimezoneInfo
     */
    readonly location?: string

    /**
     * pass the latitude of a location as query parameters to get the time zone information.
     * @type {number}
     * @memberof TimezoneApiGetTimezoneInfo
     */
    readonly lat?: number

    /**
     * pass the longitude of a location as query parameters to get the time zone information.
     * @type {number}
     * @memberof TimezoneApiGetTimezoneInfo
     */
    readonly _long?: number

    /**
     * You can pass any IPv4 or IPv6 address as a query parameter ip to get the regional timezone information.
     * @type {string}
     * @memberof TimezoneApiGetTimezoneInfo
     */
    readonly ip?: string

    /**
     * pass any 3 letter IATA code as a query paramter iata_code to get the comprehensive airport details along with the time zone information, in which that airport exists.
     * @type {string}
     * @memberof TimezoneApiGetTimezoneInfo
     */
    readonly iataCode?: string

    /**
     * pass any 4 letter ICAO code as a query paramter icao_code to get the comprehensive airport details along with the time zone information, in which that airport exists.
     * @type {string}
     * @memberof TimezoneApiGetTimezoneInfo
     */
    readonly icaoCode?: string

    /**
     * pass any 5 letter UNLOCODE as a query paramter lo_code to get the comprehensive lo code/city details along with the time zone information of the concerned city.
     * @type {string}
     * @memberof TimezoneApiGetTimezoneInfo
     */
    readonly loCode?: string

    /**
     * Desired output format (json or xml).
     * @type {string}
     * @memberof TimezoneApiGetTimezoneInfo
     */
    readonly output?: string

    /**
     * By default, the API responds in English. You can change the response language by passing the language code as a query parameter &#x60;lang&#x60;. Multi language feature is available only for &#x60;paid users&#x60;.
     * @type {'en' | 'de' | 'ru' | 'ja' | 'fr' | 'cn' | 'es' | 'cs' | 'it' | 'ko' | 'fa' | 'pt'}
     * @memberof TimezoneApiGetTimezoneInfo
     */
    readonly lang?: GetTimezoneInfoLangEnum
}

/**
 * TimezoneApi - object-oriented interface
 * @export
 * @class TimezoneApi
 * @extends {BaseAPI}
 */
export class TimezoneApi extends BaseAPI {
    /**
     * The Time Zone API provides current time, date, and time zone-related information. It supports various input types including time zone name, geographic coordinates, addresses, IPs, and location codes.  The API determines the time zone based on the following priority order if multiple parameters are provided:   1. Time Zone Name   2. Geographic Coordinates (latitude & longitude)   3. Location Address   4. IP Address   5. IATA Code   6. ICAO Code   7. UN/LOCODE  Enriched response data is returned based on the type of input: - IP: includes geolocation info - Address: includes location metadata - IATA/ICAO: includes airport info - UN/LOCODE: includes city details  You can call the time zone API without passing any time zone, coordinates, IATA, ICAO, LO code or IP address as well. It will use the calling machine\'s IP address to return the regional time zone information. 
     * @summary Timezone information details
     * @param {TimezoneApiGetTimezoneInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimezoneApi
     */
    public getTimezoneInfo(requestParameters: TimezoneApiGetTimezoneInfoRequest = {}, options?: RawAxiosRequestConfig) {
        return TimezoneApiFp(this.configuration).getTimezoneInfo(requestParameters.tz, requestParameters.location, requestParameters.lat, requestParameters._long, requestParameters.ip, requestParameters.iataCode, requestParameters.icaoCode, requestParameters.loCode, requestParameters.output, requestParameters.lang, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetTimezoneInfoLangEnum = {
    En: 'en',
    De: 'de',
    Ru: 'ru',
    Ja: 'ja',
    Fr: 'fr',
    Cn: 'cn',
    Es: 'es',
    Cs: 'cs',
    It: 'it',
    Ko: 'ko',
    Fa: 'fa',
    Pt: 'pt'
} as const;
export type GetTimezoneInfoLangEnum = typeof GetTimezoneInfoLangEnum[keyof typeof GetTimezoneInfoLangEnum];
