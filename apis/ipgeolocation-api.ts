/* tslint:disable */
/* eslint-disable */
/**
 * IPGeolocation.io - IP intelligence products
 * Ipgeolocation provides a set of APIs to make ip based decisions.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ErrorResponse } from '../models';
// @ts-ignore
import type { ErrorXMLResponse } from '../models';
// @ts-ignore
import type { GeolocationResponse } from '../models';
// @ts-ignore
import type { GeolocationXMLResponse } from '../models';
// @ts-ignore
import type { GetBulkIpGeolocation200ResponseInner } from '../models';
// @ts-ignore
import type { GetBulkIpGeolocation200ResponseInner1 } from '../models';
// @ts-ignore
import type { GetBulkIpGeolocationRequest } from '../models';
/**
 * IPLocationApi - axios parameter creator
 * @export
 */
export const IPLocationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This feature is available only on our paid API subscriptions (STANDARD or ADVANCED). This endpoint allows you to perform the geolocation lookup for multiple IPv4, IPv6 addresses or domain names (maximum 50,000) at the same time. The requests count per lookup is equal to total IP addresses or domain names passed. To perform bulk IP Geolocation Lookup, send a POST request and pass the \"ips\" array as JSON data along with it.  
         * @param {GetBulkIpGeolocationRequest} getBulkIpGeolocationRequest 
         * @param {GetBulkIpGeolocationLangEnum} [lang] By default, the API responds in English. You can change the response language by passing the language code as a query parameter &#x60;lang&#x60;. Multi language feature is available only for &#x60;paid users&#x60;.
         * @param {string} [fields] you can filter the API response by specifying the fields that you need, instead of getting the full response. To do this, pass the desired field names using the &#x60;fields&#x60; query parameter with each field represented as a dot-separated path.
         * @param {string} [excludes] you can also filter the API response by excluding specific fields (except the IP address) that you don\&#39;t need. To do this, pass the unwanted field names using the excludes query parameter, with each field represented as a dot-separated path
         * @param {string} [include] IP Geolocation API also provides IP-Security, abuse, timezone, user-agent and DMA (Designated Market Area) code, which is specifically used in the US for marketing and regional targeting information on Advanced API subscription, but doesn\&#39;t respond it by default. To get these information along with the geolocation information, you must pass the &#x60;include&#x3D;security&#x60; or &#x60;include&#x3D;abuse&#x60; or &#x60;include&#x3D;dma&#x60; or &#x60;include&#x3D;time_zone&#x60; or &#x60;include&#x3D;user-agent&#x60; or you can fetch multiples by adding values in comma-separated way. In addition to that, IPGeolocation API also provide hostname lookup for an IP address on all the paid API subscriptions (STANDARD and ADVANCED), but doesn\&#39;t respond it by default. To get the hostname for an IP address, you can pass one of the three values &#x60;hostname, liveHostname, hostnameFallbackLive&#x60; as a URL parameter &#x60;include&#x3D;&#x60;.
         * @param {string} [output] Desired output format(json or xml).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBulkIpGeolocation: async (getBulkIpGeolocationRequest: GetBulkIpGeolocationRequest, lang?: GetBulkIpGeolocationLangEnum, fields?: string, excludes?: string, include?: string, output?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'getBulkIpGeolocationRequest' is not null or undefined
            assertParamExists('getBulkIpGeolocation', 'getBulkIpGeolocationRequest', getBulkIpGeolocationRequest)
            const localVarPath = `/ipgeo-bulk`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarQueryParameter, "apiKey", configuration)

            if (lang !== undefined) {
                localVarQueryParameter['lang'] = lang;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (excludes !== undefined) {
                localVarQueryParameter['excludes'] = excludes;
            }

            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }

            if (output !== undefined) {
                localVarQueryParameter['output'] = output;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getBulkIpGeolocationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * IP Geolocation API provides real-time and accurate geolocation, network, abuse, and security information for any IPv4 or IPv6 address and domain name along with the user-agent detail for the provided user-agent string. You can geolocate your online visitors and provide them the customized user-experience accordingly.
         * @param {string} [ip] In order to find geolocation information about an IP (ipv4 ipv6) address or a domain name, pass it as a query parameter ip. When this endpoint is queried without an IP address, it returns the geolocation information of the device/client which is calling it
         * @param {GetIpGeolocationLangEnum} [lang] By default, the API responds in English. You can change the response language by passing the language code as a query parameter &#x60;lang&#x60;. Multi language feature is available only for &#x60;paid users&#x60;.
         * @param {string} [fields] you can filter the API response by specifying the fields that you need, instead of getting the full response. To do this, pass the desired field names using the &#x60;fields&#x60; query parameter with each field represented as a dot-separated path.
         * @param {string} [excludes] you can also filter the API response by excluding specific fields (except the IP address) that you don\&#39;t need. To do this, pass the unwanted field names using the excludes query parameter, with each field represented as a dot-separated path
         * @param {string} [include] IP Geolocation API also provides IP-Security, abuse, timezone, user-agent and DMA (Designated Market Area) code, which is specifically used in the US for marketing and regional targeting information on Advanced API subscription, but doesn\&#39;t respond it by default. To get these information along with the geolocation information, you must pass the &#x60;include&#x3D;security&#x60; or &#x60;include&#x3D;abuse&#x60; or &#x60;include&#x3D;dma&#x60; or &#x60;include&#x3D;time_zone&#x60; or &#x60;include&#x3D;user-agent&#x60; or you can fetch multiples by adding values in comma-separated way. In addition to that, IPGeolocation API also provide hostname lookup for an IP address on all the paid API subscriptions (STANDARD and ADVANCED), but doesn\&#39;t respond it by default. To get the hostname for an IP address, you can pass one of the three values &#x60;hostname, liveHostname, hostnameFallbackLive&#x60; as a URL parameter &#x60;include&#x3D;&#x60;.
         * @param {string} [output] Desired output format (json or xml).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIpGeolocation: async (ip?: string, lang?: GetIpGeolocationLangEnum, fields?: string, excludes?: string, include?: string, output?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ipgeo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarQueryParameter, "apiKey", configuration)

            if (ip !== undefined) {
                localVarQueryParameter['ip'] = ip;
            }

            if (lang !== undefined) {
                localVarQueryParameter['lang'] = lang;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (excludes !== undefined) {
                localVarQueryParameter['excludes'] = excludes;
            }

            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }

            if (output !== undefined) {
                localVarQueryParameter['output'] = output;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IPLocationApi - functional programming interface
 * @export
 */
export const IPLocationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = IPLocationApiAxiosParamCreator(configuration)
    return {
        /**
         * This feature is available only on our paid API subscriptions (STANDARD or ADVANCED). This endpoint allows you to perform the geolocation lookup for multiple IPv4, IPv6 addresses or domain names (maximum 50,000) at the same time. The requests count per lookup is equal to total IP addresses or domain names passed. To perform bulk IP Geolocation Lookup, send a POST request and pass the \"ips\" array as JSON data along with it.  
         * @param {GetBulkIpGeolocationRequest} getBulkIpGeolocationRequest 
         * @param {GetBulkIpGeolocationLangEnum} [lang] By default, the API responds in English. You can change the response language by passing the language code as a query parameter &#x60;lang&#x60;. Multi language feature is available only for &#x60;paid users&#x60;.
         * @param {string} [fields] you can filter the API response by specifying the fields that you need, instead of getting the full response. To do this, pass the desired field names using the &#x60;fields&#x60; query parameter with each field represented as a dot-separated path.
         * @param {string} [excludes] you can also filter the API response by excluding specific fields (except the IP address) that you don\&#39;t need. To do this, pass the unwanted field names using the excludes query parameter, with each field represented as a dot-separated path
         * @param {string} [include] IP Geolocation API also provides IP-Security, abuse, timezone, user-agent and DMA (Designated Market Area) code, which is specifically used in the US for marketing and regional targeting information on Advanced API subscription, but doesn\&#39;t respond it by default. To get these information along with the geolocation information, you must pass the &#x60;include&#x3D;security&#x60; or &#x60;include&#x3D;abuse&#x60; or &#x60;include&#x3D;dma&#x60; or &#x60;include&#x3D;time_zone&#x60; or &#x60;include&#x3D;user-agent&#x60; or you can fetch multiples by adding values in comma-separated way. In addition to that, IPGeolocation API also provide hostname lookup for an IP address on all the paid API subscriptions (STANDARD and ADVANCED), but doesn\&#39;t respond it by default. To get the hostname for an IP address, you can pass one of the three values &#x60;hostname, liveHostname, hostnameFallbackLive&#x60; as a URL parameter &#x60;include&#x3D;&#x60;.
         * @param {string} [output] Desired output format(json or xml).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBulkIpGeolocation(ips: string[], lang?: GetBulkIpGeolocationLangEnum, fields?: string, excludes?: string, include?: string, output?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetBulkIpGeolocation200ResponseInner>>> {
            const getBulkIpGeolocationRequest = {
                ips
            }
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBulkIpGeolocation(getBulkIpGeolocationRequest, lang, fields, excludes, include, output, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IPLocationApi.getBulkIpGeolocation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * IP Geolocation API provides real-time and accurate geolocation, network, abuse, and security information for any IPv4 or IPv6 address and domain name along with the user-agent detail for the provided user-agent string. You can geolocate your online visitors and provide them the customized user-experience accordingly.
         * @param {string} [ip] In order to find geolocation information about an IP (ipv4 ipv6) address or a domain name, pass it as a query parameter ip. When this endpoint is queried without an IP address, it returns the geolocation information of the device/client which is calling it
         * @param {GetIpGeolocationLangEnum} [lang] By default, the API responds in English. You can change the response language by passing the language code as a query parameter &#x60;lang&#x60;. Multi language feature is available only for &#x60;paid users&#x60;.
         * @param {string} [fields] you can filter the API response by specifying the fields that you need, instead of getting the full response. To do this, pass the desired field names using the &#x60;fields&#x60; query parameter with each field represented as a dot-separated path.
         * @param {string} [excludes] you can also filter the API response by excluding specific fields (except the IP address) that you don\&#39;t need. To do this, pass the unwanted field names using the excludes query parameter, with each field represented as a dot-separated path
         * @param {string} [include] IP Geolocation API also provides IP-Security, abuse, timezone, user-agent and DMA (Designated Market Area) code, which is specifically used in the US for marketing and regional targeting information on Advanced API subscription, but doesn\&#39;t respond it by default. To get these information along with the geolocation information, you must pass the &#x60;include&#x3D;security&#x60; or &#x60;include&#x3D;abuse&#x60; or &#x60;include&#x3D;dma&#x60; or &#x60;include&#x3D;time_zone&#x60; or &#x60;include&#x3D;user-agent&#x60; or you can fetch multiples by adding values in comma-separated way. In addition to that, IPGeolocation API also provide hostname lookup for an IP address on all the paid API subscriptions (STANDARD and ADVANCED), but doesn\&#39;t respond it by default. To get the hostname for an IP address, you can pass one of the three values &#x60;hostname, liveHostname, hostnameFallbackLive&#x60; as a URL parameter &#x60;include&#x3D;&#x60;.
         * @param {string} [output] Desired output format (json or xml).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIpGeolocation(ip?: string, lang?: GetIpGeolocationLangEnum, fields?: string, excludes?: string, include?: string, output?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GeolocationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIpGeolocation(ip, lang, fields, excludes, include, output, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IPLocationApi.getIpGeolocation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * IPLocationApi - factory interface
 * @export
 */
export const IPLocationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = IPLocationApiFp(configuration)
    return {
        /**
         * This feature is available only on our paid API subscriptions (STANDARD or ADVANCED). This endpoint allows you to perform the geolocation lookup for multiple IPv4, IPv6 addresses or domain names (maximum 50,000) at the same time. The requests count per lookup is equal to total IP addresses or domain names passed. To perform bulk IP Geolocation Lookup, send a POST request and pass the \"ips\" array as JSON data along with it.  
         * @param {IPLocationApiGetBulkIpGeolocationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBulkIpGeolocation(requestParameters: IPLocationApiGetBulkIpGeolocationRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetBulkIpGeolocation200ResponseInner>> {
            return localVarFp.getBulkIpGeolocation(requestParameters.ips, requestParameters.lang, requestParameters.fields, requestParameters.excludes, requestParameters.include, requestParameters.output, options).then((request) => request(axios, basePath));
        },
        /**
         * IP Geolocation API provides real-time and accurate geolocation, network, abuse, and security information for any IPv4 or IPv6 address and domain name along with the user-agent detail for the provided user-agent string. You can geolocate your online visitors and provide them the customized user-experience accordingly.
         * @param {IPLocationApiGetIpGeolocationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIpGeolocation(requestParameters: IPLocationApiGetIpGeolocationRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<GeolocationResponse> {
            return localVarFp.getIpGeolocation(requestParameters.ip, requestParameters.lang, requestParameters.fields, requestParameters.excludes, requestParameters.include, requestParameters.output, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getBulkIpGeolocation operation in IPLocationApi.
 * @export
 * @interface IPLocationApiGetBulkIpGeolocationRequest
 */
export interface IPLocationApiGetBulkIpGeolocationRequest {
    /**
     * 
     * @type {GetBulkIpGeolocationRequest}
     * @memberof IPLocationApiGetBulkIpGeolocation
     */
    readonly ips: string[];

    /**
     * By default, the API responds in English. You can change the response language by passing the language code as a query parameter &#x60;lang&#x60;. Multi language feature is available only for &#x60;paid users&#x60;.
     * @type {'en' | 'de' | 'ru' | 'ja' | 'fr' | 'cn' | 'es' | 'cs' | 'it' | 'ko' | 'fa' | 'pt'}
     * @memberof IPLocationApiGetBulkIpGeolocation
     */
    readonly lang?: GetBulkIpGeolocationLangEnum

    /**
     * you can filter the API response by specifying the fields that you need, instead of getting the full response. To do this, pass the desired field names using the &#x60;fields&#x60; query parameter with each field represented as a dot-separated path.
     * @type {string}
     * @memberof IPLocationApiGetBulkIpGeolocation
     */
    readonly fields?: string

    /**
     * you can also filter the API response by excluding specific fields (except the IP address) that you don\&#39;t need. To do this, pass the unwanted field names using the excludes query parameter, with each field represented as a dot-separated path
     * @type {string}
     * @memberof IPLocationApiGetBulkIpGeolocation
     */
    readonly excludes?: string

    /**
     * IP Geolocation API also provides IP-Security, abuse, timezone, user-agent and DMA (Designated Market Area) code, which is specifically used in the US for marketing and regional targeting information on Advanced API subscription, but doesn\&#39;t respond it by default. To get these information along with the geolocation information, you must pass the &#x60;include&#x3D;security&#x60; or &#x60;include&#x3D;abuse&#x60; or &#x60;include&#x3D;dma&#x60; or &#x60;include&#x3D;time_zone&#x60; or &#x60;include&#x3D;user-agent&#x60; or you can fetch multiples by adding values in comma-separated way. In addition to that, IPGeolocation API also provide hostname lookup for an IP address on all the paid API subscriptions (STANDARD and ADVANCED), but doesn\&#39;t respond it by default. To get the hostname for an IP address, you can pass one of the three values &#x60;hostname, liveHostname, hostnameFallbackLive&#x60; as a URL parameter &#x60;include&#x3D;&#x60;.
     * @type {string}
     * @memberof IPLocationApiGetBulkIpGeolocation
     */
    readonly include?: string

    /**
     * Desired output format(json or xml).
     * @type {string}
     * @memberof IPLocationApiGetBulkIpGeolocation
     */
    readonly output?: string
}

/**
 * Request parameters for getIpGeolocation operation in IPLocationApi.
 * @export
 * @interface IPLocationApiGetIpGeolocationRequest
 */
export interface IPLocationApiGetIpGeolocationRequest {
    /**
     * In order to find geolocation information about an IP (ipv4 ipv6) address or a domain name, pass it as a query parameter ip. When this endpoint is queried without an IP address, it returns the geolocation information of the device/client which is calling it
     * @type {string}
     * @memberof IPLocationApiGetIpGeolocation
     */
    readonly ip?: string

    /**
     * By default, the API responds in English. You can change the response language by passing the language code as a query parameter &#x60;lang&#x60;. Multi language feature is available only for &#x60;paid users&#x60;.
     * @type {'en' | 'de' | 'ru' | 'ja' | 'fr' | 'cn' | 'es' | 'cs' | 'it' | 'ko' | 'fa' | 'pt'}
     * @memberof IPLocationApiGetIpGeolocation
     */
    readonly lang?: GetIpGeolocationLangEnum

    /**
     * you can filter the API response by specifying the fields that you need, instead of getting the full response. To do this, pass the desired field names using the &#x60;fields&#x60; query parameter with each field represented as a dot-separated path.
     * @type {string}
     * @memberof IPLocationApiGetIpGeolocation
     */
    readonly fields?: string

    /**
     * you can also filter the API response by excluding specific fields (except the IP address) that you don\&#39;t need. To do this, pass the unwanted field names using the excludes query parameter, with each field represented as a dot-separated path
     * @type {string}
     * @memberof IPLocationApiGetIpGeolocation
     */
    readonly excludes?: string

    /**
     * IP Geolocation API also provides IP-Security, abuse, timezone, user-agent and DMA (Designated Market Area) code, which is specifically used in the US for marketing and regional targeting information on Advanced API subscription, but doesn\&#39;t respond it by default. To get these information along with the geolocation information, you must pass the &#x60;include&#x3D;security&#x60; or &#x60;include&#x3D;abuse&#x60; or &#x60;include&#x3D;dma&#x60; or &#x60;include&#x3D;time_zone&#x60; or &#x60;include&#x3D;user-agent&#x60; or you can fetch multiples by adding values in comma-separated way. In addition to that, IPGeolocation API also provide hostname lookup for an IP address on all the paid API subscriptions (STANDARD and ADVANCED), but doesn\&#39;t respond it by default. To get the hostname for an IP address, you can pass one of the three values &#x60;hostname, liveHostname, hostnameFallbackLive&#x60; as a URL parameter &#x60;include&#x3D;&#x60;.
     * @type {string}
     * @memberof IPLocationApiGetIpGeolocation
     */
    readonly include?: string

    /**
     * Desired output format (json or xml).
     * @type {string}
     * @memberof IPLocationApiGetIpGeolocation
     */
    readonly output?: string
}

/**
 * IPLocationApi - object-oriented interface
 * @export
 * @class IPLocationApi
 * @extends {BaseAPI}
 */
export class IPGeolocationApi extends BaseAPI {
    /**
     * This feature is available only on our paid API subscriptions (STANDARD or ADVANCED). This endpoint allows you to perform the geolocation lookup for multiple IPv4, IPv6 addresses or domain names (maximum 50,000) at the same time. The requests count per lookup is equal to total IP addresses or domain names passed. To perform bulk IP Geolocation Lookup, send a POST request and pass the \"ips\" array as JSON data along with it.  
     * @param {IPLocationApiGetBulkIpGeolocationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IPLocationApi
     */
    public getBulkIpGeolocation(requestParameters: IPLocationApiGetBulkIpGeolocationRequest, options?: RawAxiosRequestConfig) {
        return IPLocationApiFp(this.configuration).getBulkIpGeolocation(requestParameters.ips, requestParameters.lang, requestParameters.fields, requestParameters.excludes, requestParameters.include, requestParameters.output, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * IP Geolocation API provides real-time and accurate geolocation, network, abuse, and security information for any IPv4 or IPv6 address and domain name along with the user-agent detail for the provided user-agent string. You can geolocate your online visitors and provide them the customized user-experience accordingly.
     * @param {IPLocationApiGetIpGeolocationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IPLocationApi
     */
    public getIpGeolocation(requestParameters: IPLocationApiGetIpGeolocationRequest = {}, options?: RawAxiosRequestConfig) {
        return IPLocationApiFp(this.configuration).getIpGeolocation(requestParameters.ip, requestParameters.lang, requestParameters.fields, requestParameters.excludes, requestParameters.include, requestParameters.output, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetBulkIpGeolocationLangEnum = {
    En: 'en',
    De: 'de',
    Ru: 'ru',
    Ja: 'ja',
    Fr: 'fr',
    Cn: 'cn',
    Es: 'es',
    Cs: 'cs',
    It: 'it',
    Ko: 'ko',
    Fa: 'fa',
    Pt: 'pt'
} as const;
export type GetBulkIpGeolocationLangEnum = typeof GetBulkIpGeolocationLangEnum[keyof typeof GetBulkIpGeolocationLangEnum];
/**
 * @export
 */
export const GetIpGeolocationLangEnum = {
    En: 'en',
    De: 'de',
    Ru: 'ru',
    Ja: 'ja',
    Fr: 'fr',
    Cn: 'cn',
    Es: 'es',
    Cs: 'cs',
    It: 'it',
    Ko: 'ko',
    Fa: 'fa',
    Pt: 'pt'
} as const;
export type GetIpGeolocationLangEnum = typeof GetIpGeolocationLangEnum[keyof typeof GetIpGeolocationLangEnum];
